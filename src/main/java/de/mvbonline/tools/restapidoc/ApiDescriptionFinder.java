package de.mvbonline.tools.restapidoc;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXB;

import de.mvbonline.tools.restapidoc.doclet.model.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.core.io.Resource;

/**
 * loads all apidoc.xml (generated by  {@link JavadocToXMLDoclet} found in classpath and offers convenience methods for access.
 * 
 */
public class ApiDescriptionFinder {

    private ApiDescription apiDescriptions;

    private BlacklistLoader blacklistLoader;


    public ApiDescriptionFinder() throws IOException{
        super();
        collectApiDescriptions();
        initializeBlacklistLoader();
    }


    /**
     * Looks for apidoc.xml Javadoc description files (generated by RestApiDoclet) in the classpath and loads them.
     * 
     * @throws IOException
     */
    private void collectApiDescriptions() throws IOException {
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext();
        Resource[] apidocsRes = applicationContext.getResources("classpath*:/META-INF/apidocs/apidoc.xml");
        apiDescriptions = new ApiDescription();
        for (Resource apidocRes : apidocsRes) {
            ApiDescription apidoc = JAXB.unmarshal(apidocRes.getInputStream(), ApiDescription.class);
            apiDescriptions.addClasses(apidoc.getClasses());
        }
    }

    private void initializeBlacklistLoader() throws IOException {
        this.blacklistLoader = BlacklistLoader.getInstance();
    }
    

    /**
     * looks up a class description
     * 
     * @param className
     *            full qualified name of the class
     * @return the ClassDescription or null if none were found
     */
    public ClassDescription getClassDescription(String className) {
        if (apiDescriptions != null && apiDescriptions.getClasses() != null) {
            for (ClassDescription classDoc : apiDescriptions.getClasses()) {
                if (classDoc.getFullClassName().equals(className)) {
                    if (blacklistLoader.classInBlacklist(classDoc.getFullClassName()) || blacklistLoader.classInBlacklist(classDoc.getName())) {
                        return null;
                    }
                    return classDoc;
                }
            }
        }
        return null;
    }

    /**
     * looks up an element description
     * @param methodDesc
     *            the mthod description
     * @param name
     *            of the parameter
     * @return the description or an empty string if none were found
     */
    public String getElementDescription(MethodDescription methodDesc, String name) {
        if (methodDesc != null && methodDesc.getParameters() != null) {
            for (ElementDescription elementDoc : methodDesc.getParameters()) {
                if (elementDoc.getName().equals(name)) {
                    if (blacklistLoader.methodInBlacklist(elementDoc.getName())) {
                        return null;
                    }
                    return elementDoc.getDescription();
                }
            }
        }
        return "";
    }

    /**
     * looks up a description of a field/property
     * @param classDesc the owning class
     * @param name of the property/field
     * @return either the description of the field or an empty string if it doesn't exist
     */
    public String getFieldDescription(ClassDescription classDesc, String name) {
        if (classDesc != null && classDesc.getProperties() != null) {
            for (ElementDescription elementDoc : classDesc.getProperties()) {
                if (elementDoc.getName().equals(name)) {
                    if (blacklistLoader.fieldInBlacklist(elementDoc.getName())) {
                        return null;
                    }
                    return elementDoc.getDescription();
                }
            }
        }
        return "";
    }

    /**
     * looks up the annotations of a field/property
     * @param classDesc the owning class
     * @param name of the property/field
     * @return either the description of the field or an empty string if it doesn't exist
     */
    public List<String> getFieldAnnotations(ClassDescription classDesc, String name) {
        if (classDesc != null && classDesc.getProperties() != null) {
            for (ElementDescription elementDoc : classDesc.getProperties()) {
                if (elementDoc.getName().equals(name) && elementDoc.getAnnotations() != null && !elementDoc.getAnnotations().isEmpty()) {
                    List<String> annotations = new ArrayList<String>();

                    for (Annotation annotation : elementDoc.getAnnotations()) {
                        if (blacklistLoader.annotationInBlacklist(annotation.getName())) {
                            continue;
                        }

                        String keyValueString = "";

                        for (AnnotationKeyValue keyValue : annotation.getKeyValues()) {
                            if (StringUtils.isNotEmpty(keyValueString)) {
                                keyValueString = keyValueString + ", ";
                            }

                            if (StringUtils.isNotEmpty(keyValue.getValue())) {
                                keyValueString = keyValueString + keyValue.getName() + "=" + keyValue.getValue();
                            } else {
                                keyValueString = keyValueString + keyValue.getName();
                            }
                        }

                        String annotationString = annotation.getName() + "(" + keyValueString + ")";
                        annotations.add(annotationString);
                    }

                    return annotations;
                }
            }
        }

        return null;
    }

    /**
     * looks up a method description
     * 
     * @param classDesc
     *            the class description containing the method.
     * @param name
     *            of the method
     * @return methodDescription or null if none were found
     */
    public MethodDescription getMethodDescription(ClassDescription classDesc, String name) {
        if (classDesc != null) {
            for (MethodDescription methodDoc : classDesc.getMethods()) {
                if (methodDoc.getName().equals(name)) {
                    if (blacklistLoader.methodInBlacklist(name)) {
                        return null;
                    }
                    return methodDoc;
                }
            }
        }
        return null;
    }
}
